2012-11-13 Consider adding a 'func_name' or 'arg_name' property to Options (and Args?). It would save a few .replace('-', '_') dances throughout the code. The problem is coming up with a name that enhances readability rather than the opposite...

2012-05-16 Rewrite global options to be explicitly set, rather than inferred from globals(). The latter is just too implicit, and makes you have to think about where in your code you declare global options - that's bad.

2012-12-06 Support passing an option multiple times. An arg that defaults to a list would indicate such a thing?

2012-05-07 Avoid throwing InvalidShortName exceptions when multiple func args begin with the same letter. By default, we choose short names to avoid conflicts, by passing an optional list of "taken" short names, and having Commands choose the shortnames for their Options, rather than letting options do it internally.

2012-11-04 Decide whether long option names should be case-insensitive (longstanding tradition says short ones are not) and make it so.

2012-09-11 Write a test suite. It looks like ScriptTest might be a good candidate for so doing. There's also Cram.

2012-08-22 Try to format usage message for device it's being displayed on (i.e., try to detect terminal width).

2012-09-14 Fix parsing of command summary - it currently assumes a '.' indicates the end of the summary, which could fail in some cases.

2012-09-14 Fix bug where main command is referred to by command name when a BadArgCount is caught. This is one of several warts that suggests main commands might be a subclass - they need more data than regular ones.

2012-09-14 Support portable option prefixes - Windows uses '/', for instance.

2012-05-04 Support config files.

2012-09-22 Add support for rethrowing all caught exceptions. This would make debugging the cmdline.py library easier.

2012-09-10 Detect newline char(s) used in a docstring when parsing it. I've used a hardcoded '\n' in some places, and os.linesep in others, both of which can fail for valid inputs.

2012-09-10 Support Tab-indented code (mainly a docstring parsing problem).

2012-09-07 Consider trying to evaluate python inside backticks in docstrings. That would let things like `os.linesep` display the actual character in help messages. This is probably too clever - it would add a lot of complexity for little gain. Another option - match param name to actual param and substitute the default value?

2012-09-11 Consider adding opt-in type inference for options; where there's a default value, the default probably tells us what type that option should be. Getting a callable to convert to that type might be tricky, but so it goes. Could be a dumb idea.

2012-09-11 Consider whether there's any validity to type guessing. "1" as an input looks like it should be an int, so we can just make it that, without being explicitly told "This should be an int." It's probably too implicit, but I wonder if there are cases where it might be useful, and don't want to lose the idea until I've had a chance to think about it more.

2012-09-10 Add help paging of some kind. A long help document makes you scroll to read, which is annoying.

2012-05-08 Support app defaults for param_type and short_names.

2012-05-12 Consider storing param_type functions directly in the Option and Arg classes. It might clear things up a bit.

2012-05-08 Consider adding a few useful type converters. A Python implementation of approxidate would be nice (https://github.com/git/git/blob/master/date.c), as would a file path converter.

2012-05-04 Convert DEBUG and GRIPE comments into actions.

2012-09-14 Package this as a proper Python module and submit it to PyPI. This really should not happen until it's semi-stable, a real program or two has been written with it, and it has a test suite.

2012-05-08 Consider making this a wrapper around one of the existing optparsing libraries, which could save heavy lifting in building powerful apps. Doing it earlier would have saved more effort, but still worth looking at.

2012-05-07 Think about whether we can support commands that accept an indefinite number of args.

2012-09-10 Port to Python 3 - if all the preceding items are handled, it means someone is using this thing (even if it's just me), and they may want to have it around for the next version of the language. In 3, we could probably use arg annotations to do type mappings.
